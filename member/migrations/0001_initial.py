# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2017-08-13 12:33
from __future__ import unicode_literals

import autoslug.fields
from django.db import migrations, models
import django.utils.timezone
import django_countries.fields
import member.memberusermanager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(db_index=True, max_length=254, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('slug', autoslug.fields.AutoSlugField(blank=True, editable=False, populate_from=b'username')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified his account by email or by other means. Un-select this to let the user activate his account.', verbose_name='verified')),
                ('nick', models.CharField(max_length=200)),
                ('birthdate', models.CharField(max_length=200)),
                ('phone', models.CharField(max_length=200)),
                ('mobile', models.CharField(max_length=200)),
                ('street', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=200)),
                ('country_id', django_countries.fields.CountryField(max_length=2)),
                ('zip', models.CharField(max_length=200)),
                ('careof', models.CharField(max_length=200)),
                ('socialsecuritynumber', models.CharField(max_length=200)),
                ('joinedon', models.DateTimeField(auto_now_add=True, verbose_name=b'Joined on')),
                ('refreshedon', models.DateTimeField(null=True, verbose_name=b'Refreshed on')),
                ('image', models.ImageField(height_field=b'image_height', max_length=500, upload_to=b'members', width_field=b'image_width')),
                ('image_height', models.IntegerField(default=0)),
                ('image_width', models.IntegerField(default=0)),
                ('is_opt_in', models.BooleanField(default=False)),
                ('use_gravatar', models.BooleanField(default=False)),
                ('gravatar_type', models.CharField(choices=[(b'identicon', b'A geometric pattern based on an email hash'), (b'monsterid', b"A generated 'monster' with different colors, faces, etc"), (b'wavatar', b'Generated faces with differing features and backgrounds'), (b'retro', b'awesome generated, 8-bit arcade-style pixelated faces')], default=b'identicon', max_length=20)),
                ('membership_populated', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', member.memberusermanager.MemberUserManager()),
            ],
        ),
    ]
